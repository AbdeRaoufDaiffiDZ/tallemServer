const express = require("express");
const moduleRouter = express.Router();
const Subject = require("../models/module");

// --- Existing Endpoints (unchanged) ---

moduleRouter.post("/add_course", async (req, res) => {
  try {
    const { year, name, speciality, courseName, link, title } = req.body;
    if (!year || !name || !speciality || !courseName || !link) {
      return res.status(400).json({ msg: "جميع الحقول مطلوبة" });
    }
    let existModule = await Subject.findOne({ name, speciality, year });
    const course = { name: courseName, link, title: title };

    if (existModule) {
      existModule.courses.push(course);
      await existModule.save();
      return res.status(200).json(existModule);
    }

    const subject = new Subject({ year, name, speciality, courses: [course], exames: [] });
    await subject.save();
    console.log("New subject created and course added");
    res.status(200).json(subject);
  } catch (error) {
    console.error("Add course error:", error.message);
    res.status(500).json({ error: "خطأ في إضافة الدرس" });
  }
});

moduleRouter.post("/add_exame", async (req, res) => {
  try {
    const { year, name, speciality, exameName, link, solutionLink, title } = req.body;
    if (!year || !name || !speciality || !exameName || !link) {
      return res.status(400).json({ msg: "جميع الحقول مطلوبة" });
    }
    // Note: The original code for finding 'existModule' here also included 'title'
    // in the find query: 'name, speciality, year, title'.
    // If 'title' is not a unique identifier for the module itself,
    // and just for the exam, you should remove 'title' from the find query below.
    // Assuming 'name', 'speciality', 'year' uniquely identify the module.
    let existModule = await Subject.findOne({ name, speciality, year });
    const exame = { name: exameName, link, solutionLink, title };

    if (existModule) {
      existModule.exames.push(exame);
      await existModule.save();
      return res.status(200).json(existModule);
    }

    const subject = new Subject({ year, name, speciality, courses: [], exames: [exame] });
    await subject.save();
    res.status(200).json(subject);
  } catch (error) {
    console.error("Add exam error:", error.message);
    res.status(500).json({ error: "خطأ في إضافة الامتحان" });
  }
});

moduleRouter.post("/get_module", async (req, res) => {
  try {
    const { year, name, speciality } = req.body;
    if (!year || !name || !speciality) {
      return res.status(400).json({ msg: "المعلومات غير كاملة" });
    }
    const module = await Subject.findOne({ name, speciality, year });
    if (!module) {
      return res.status(404).json({ msg: "لا يوجد دروس أو امتحانات حاليًا" });
    }
    res.status(200).json(module);
  } catch (error) {
    console.error("Get module error:", error.message);
    res.status(500).json({ error: "خطأ في جلب المادة" });
  }
});

// --- NEW DELETE ENDPOINTS ---

moduleRouter.post("/delete_course", async (req, res) => {
  try {
    // Assuming 'courseId' is the _id generated by MongoDB for the subdocument
    const { courseId, moduleName, year, speciality } = req.body;

    if (!courseId || !moduleName || !year || !speciality) {
      return res.status(400).json({ msg: "جميع الحقول المطلوبة للحذف غير متوفرة" });
    }

    // Find the module that contains this course
    const module = await Subject.findOne({ name: moduleName, speciality, year });

    if (!module) {
      return res.status(404).json({ msg: "المادة غير موجودة." });
    }

    // Use Mongoose's .pull() method to remove the subdocument by its _id
    // Make sure your Course schema (if separate) or the subdocument
    // in the Subject schema has an _id field.
    module.courses.pull({ _id: courseId });

    await module.save(); // Save the updated module document

    console.log(`Course with ID ${courseId} deleted from module ${moduleName}`);
    // Respond with the updated module data
    res.status(200).json(module);
  } catch (error) {
    console.error("Delete course error:", error.message);
    res.status(500).json({ error: "خطأ في حذف الدرس" });
  }
});

moduleRouter.post("/delete_exame", async (req, res) => {
  try {
    // Assuming 'exameId' is the _id generated by MongoDB for the subdocument
    const { exameId, moduleName, year, speciality } = req.body;

    if (!exameId || !moduleName || !year || !speciality) {
      return res.status(400).json({ msg: "جميع الحقول المطلوبة للحذف غير متوفرة" });
    }

    // Find the module that contains this exam
    const module = await Subject.findOne({ name: moduleName, speciality, year });

    if (!module) {
      return res.status(404).json({ msg: "المادة غير موجودة." });
    }

    // Use Mongoose's .pull() method to remove the subdocument by its _id
    // Make sure your Exam schema (if separate) or the subdocument
    // in the Subject schema has an _id field.
    module.exames.pull({ _id: exameId });

    await module.save(); // Save the updated module document

    console.log(`Exam with ID ${exameId} deleted from module ${moduleName}`);
    // Respond with the updated module data
    res.status(200).json(module);
  } catch (error) {
    console.error("Delete exam error:", error.message);
    res.status(500).json({ error: "خطأ في حذف الامتحان" });
  }
});

module.exports = moduleRouter;